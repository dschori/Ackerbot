FROM nvidia/cuda:11.1-base-ubuntu20.04

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

ARG DEBIAN_FRONTEND=noninteractive

# add the ROS deb repo to the apt sources list
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          git \
          nano \
	  cmake \
	  build-essential \
	  curl \
	  wget \
	  gnupg2 \
	  lsb-release \
	  python3-pip \
      python3-dev \
      python3-setuptools \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    apt-get install -y software-properties-common && \
    apt-key adv --keyserver keys.gnupg.net --recv-key F6E65AC044F831AC80A06380C8B3A55A6F3EFCDE && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key &&\
    add-apt-repository "deb http://realsense-hw-public.s3.amazonaws.com/Debian/apt-repo focal main" -u &&\
    apt-get install apt-utils -y &&\
    apt-get install --no-install-recommends -yq lsb-release

RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
RUN apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

RUN apt-get update &&\
    apt-get install -yq --no-install-recommends ros-noetic-desktop-full &&\
    apt-get install ros-noetic-joint-state-publisher -y &&\
    apt-get install ros-noetic-teleop-twist-keyboard -y &&\
    apt-get install ros-noetic-ackermann-msgs -y &&\
    apt-get install ros-noetic-map-server -y &&\
    apt-get install ros-noetic-move-base -y &&\
    apt-get install ros-noetic-global-planner -y &&\
    apt-get install ros-noetic-amcl -y &&\
    apt-get install ros-noetic-teb-local-planner -y &&\
    apt-get install ros-noetic-effort-controllers -y &&\
    apt-get install ros-noetic-joy -y &&\
    apt-get install ros-noetic-tf2-sensor-msgs -y &&\
	apt-get install python3-rosdep &&\
	apt-get install python-is-python3

RUN rosdep init
RUN rosdep update

# Catkin Tools (catkin build)
WORKDIR /
RUN git clone https://github.com/catkin/catkin_tools.git
WORKDIR /catkin_tools
RUN pip3 install -r requirements.txt --upgrade && \
    python3 setup.py install --record install_manifest.txt


# install tools
RUN mkdir -p /home/catkin_ws/src
WORKDIR /home/catkin_ws/src
RUN git clone https://github.com/mit-racecar/racecar.git
RUN git clone https://github.com/mit-racecar/racecar-simulator.git
RUN git clone https://bitbucket.org/theconstructcore/openai_ros.git
#RUN git clone https://github.com/karray/neuroracer.git
WORKDIR /home/catkin_ws
RUN rosdep install --from-paths src --ignore-src -r -y
RUN /bin/bash -c '. /opt/ros/noetic/setup.bash; cd /home/catkin_ws; catkin build'

#install gzweb
#COPY install_gzweb.sh ./
#RUN ["chmod", "+x", "install_gzweb.sh"]
#RUN ./install_gzweb.sh

# install packages
RUN apt-get update && apt-get install -q -y \
    build-essential \
    cmake \
    imagemagick \
    libboost-all-dev \
    libgts-dev \
    libjansson-dev \
    libtinyxml-dev \
    mercurial \
    nodejs \
    libnode64 \
    npm \
    pkg-config \
    psmisc \
    xvfb\
    && rm -rf /var/lib/apt/lists/*

# clone gzweb
ENV GZWEB_WS /root/gzweb
RUN git clone https://github.com/osrf/gzweb.git $GZWEB_WS
WORKDIR $GZWEB_WS

# build gzweb
RUN mkdir -p /root/gzweb/http/client/assets/
RUN cp -rf -p /home/catkin_ws/src/racecar-simulator/racecar_description /root/gzweb/http/client/assets
RUN git checkout gzweb_1.4.1 \
    && xvfb-run -s "-screen 0 1280x1024x24" ./deploy.sh -m local

# Install OpenJDK-8
RUN apt-get update && \
    apt-get install -y openjdk-8-jdk && \
    apt-get install -y ant && \
    apt-get install -y xauth && \
    apt-get clean;

# Install Pycharm
WORKDIR /tmp
RUN wget https://download-cf.jetbrains.com/python/pycharm-community-2020.3.1.tar.gz && \
    tar xzf pycharm-*.tar.gz -C /opt/

# Install Python Packages
RUN pip3 install tensorflow==2.2 && \
    pip3 install gym && \
    pip3 install scikit-learn && \
    pip3 install matplotlib && \
    pip3 install scipy && \
    pip3 install jupyterlab && \
    pip3 install scikit-image && \
    pip3 install tensorflow-probability==0.10.1 && \
    pip3 install tf-agents==0.5.0

WORKDIR /home
COPY start.sh ./
RUN ["chmod", "+x", "start.sh"]

# Expose Jupyter
EXPOSE 8888
# Expose Gazebo web
EXPOSE 8080